<?php

namespace Flavorly\InertiaFlash\Notification;

use Flavorly\InertiaFlash\Notification\Concerns\HasIcon;
use Flavorly\InertiaFlash\Notification\Concerns\HasNotificationActions;
use Flavorly\InertiaFlash\Notification\Concerns\HasNotificationDataLevel;
use Flavorly\InertiaFlash\Notification\Concerns\HasNotificationDataType;
use Flavorly\InertiaFlash\Notification\Concerns\HasNotificationDataViaChannel;
use Flavorly\InertiaFlash\Notification\Concerns\HasNotificationDispatcher;
use Flavorly\InertiaFlash\Notification\Concerns\HasReadableNotifications;
use Flavorly\InertiaFlash\Notification\Data\NotificationTimestampsData;
use Spatie\LaravelData\Data;

class Notification extends Data
{
    use HasIcon;
    use HasNotificationActions;
    use HasNotificationDataLevel;
    use HasNotificationDataType;
    use HasNotificationDataViaChannel;
    use HasNotificationDispatcher;
    use HasReadableNotifications;

    /**
     * A unique ID, if its a persistent notification this should be the ID of the notification on the database
     * otherwise is a uuid generated by the body ( message )
     */
    public int|string $id;

    /**
     * The message to be displayed, required
     */
    public string $message;

    /**
     * Default value to true, if false the notification will not be shown
     */
    public bool $shown = true;

    /**
     * Optional Title for the Notification
     */
    public ?string $title = null;

    /**
     * If we should allow raw HTML on the message to be passed in
     *
     * Default is false
     */
    public bool $allows_unsafe_html = false;

    /**
     * A optional timeout for the notification to be closed
     */
    public ?int $timeout = null;

    /**
     * Stores the timestamps for the notification
     */
    public NotificationTimestampsData $timestamps;

    /**
     * Just a blind constructor, we should be able to compose via fluent
     * So no need to pass any arguments
     */
    public function __construct()
    {
    }

    /**
     * Sets a message & title for the notification
     */
    public function message(string $message, ?string $title = null): static
    {
        $this->message = $message;
        $this->title = $title ?? $this->title;

        return $this;
    }

    /**
     * Sets the title for the notification
     */
    public function title(?string $title = null): static
    {
        $this->title = $title;

        return $this;
    }
}
